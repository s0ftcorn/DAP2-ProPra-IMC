1)
Während fork() den Addressraum komplett kopiert und der Kindprozess dann in diesem 
weiterarbeitet, arbeitet vfork() performanter und zwar folgendermaßen:
- Der Elternprozess wird suspendiert bis der Kindprozess terminiert bzw. exec aufruft,
bis zu diesem Zeitpunkt teilt sich der Kindprozess den Addressraum mit dem Elternprozess,
inklusive des Stacks.
- Greift der Kindprozess auf Daten des Elternprozesses zu, außnahme Variablen vom Typ pid_t,
so muss man mit undefiniertem Verhalten rechnen. D.h. man muss mit vfork() ziemlich genau
wissen was man tut, u.a. welche Variablen in welchem Register sind. Ein Beispiel statt
exit() muss man _exit() verwenden. Da exit() zuviel aufräumen würde.
2)
Der ">" Operator schreibt die Ausgabe eines Programmes in eine Datei. Existiert die Datei 
nicht so wird diese erstellt, existiert sie jedoch wird sie überschrieben.
3)
Ein verwaister Prozess ist ein Prozess dessen Elternprozess beendet wurde. Ein
Zombieprozess ist einfach ein Prozess schon beendet ist, aber dennoch in der Prozess-
tabelle auftaucht und dementsprechend wenig Systemresourcen verbraucht,
ist also prinzipiell nicht schädlich, aber kann auf Programmierfehler
aufmerksam machen. Außerdem belegt ein Zombie weiterhin eine PID,
d.h. entwaige Schutzmechanismen für Forkbomben könnten hier greifen.
Im Gegensatz zu verwaisten Prozessen, kümmert sich das Betriebssystem wenig
um Zombies. Verwaiste Prozesse bekommen als Elternprozess den Prozess mit der 
PID 1, auf Unix-System ist dies der "init"-Prozess. Ist der verwaiste Prozess
zusätzlich ein Zombie, so wird dieser von dem neuen Elternprozess "init" 
aufgeräumt.
4)
Ein Leichtgewichtiger Prozess, auch Thread genannt, teilt sich mit anderen 
Threads die Betriebsmittel und den Kontext, hat jedoch einen eigenen Stack.
Ein Schwergewichtiger Prozess hat jedoch seinen eigenen Addressraum, eigenen
Stack und ist somit komplett abgeschottet von anderen Prozessen.
Für die CPU geht ein Prozesswechsel zwischen Threads schneller, zwischen
schwergewichtigen Prozessen dementsprechend langsamer. Ferner kann mit
Threads eine echte parallelisierung auf Multikern-Systemen realisiert werden.
