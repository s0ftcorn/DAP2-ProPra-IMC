#BlueJ class context
comment0.params=id
comment0.target=Node(int)
comment0.text=\n\ Node\ Konstruktor\n\n\ @param\ id\ ID\ des\ Knotens\n
comment1.params=
comment1.target=int\ getID()
comment1.text=\n\ @return\ Die\ ID\ des\ Knotens\n
comment10.params=other
comment10.target=boolean\ equals(Node)
comment10.text=\n\ Vergleicht\ zwei\ Knoten\ anhand\ ihrer\ ID\n\ @param\ other\ Knoten,\ mit\ dem\ verglichen\ wird\n\ @return\ true,\ falls\ die\ IDs\ gleich\ sind\n
comment11.params=other
comment11.target=boolean\ equals(java.lang.Integer)
comment11.text=\n\ Vergleicht\ die\ ID\ dieses\ Knotens\ mit\ einer\ anderen\ ID\n\ @param\ other\ ID,\ mit\ der\ verglichen\ wird\n\ @return\ true,\ wenn\ die\ ID\ dieses\ Knotens\ gleich\ der\ anderen\ ID\ ist\n
comment2.params=v\ c
comment2.target=boolean\ addEdge(Node,\ double)
comment2.text=\n\ Fuegt\ eine\ neue\ Kante\ in\ die\ Adjazenzliste\ des\ Knotens\ ein\n\ @param\ v\ Endknoten\ der\ Kante\n\ @param\ c\ Kosten\ der\ Kante\n\ @return\ true,\ wenn\ noch\ keine\ Kante\ zu\ diesem\ Knoten\ besteht\n
comment3.params=v\ c
comment3.target=boolean\ changeEdge(Node,\ double)
comment3.text=\n\ Aendert\ eine\ Kante\ in\ der\ Adjazenzliste\ des\ Knotens\n\ @param\ v\ Endknoten\ der\ Kante\n\ @param\ c\ neue\ Kosten\ der\ Kante\n\ @return\ true,\ wenn\ die\ Kante\ bereits\ exisitiert\ und\ geaendert\ wurde\n
comment4.params=e
comment4.target=boolean\ deleteEdge(Edge)
comment4.text=\n\ Loescht\ eine\ Kante\ aus\ der\ Adjazenzliste\n\ @param\ ezu\ loeschende\ Kante\n\ @return\ true,\ wenn\ die\ Kante\ vorhanden\ war\n
comment5.params=v
comment5.target=boolean\ deleteEdge(Node)
comment5.text=\n\ Loescht\ eine\ Kante\ aus\ der\ Adjazenzliste\n\ @param\ v\ Endknoten\ der\ zu\ loeschenden\ Kante\n\ @return\ true,\ wenn\ die\ Kante\ vorhanden\ war\n
comment6.params=
comment6.target=java.util.ArrayList\ getAdjacentList()
comment6.text=\n\ Gibt\ eine\ Kopie\ der\ Adjazenzliste\ zurueck\n\ @return\ Kopie\ der\ Adjazenzliste\n
comment7.params=other
comment7.target=int\ compareTo(Node)
comment7.text=\n\ Vergleicht\ zwei\ Knoten\ anhand\ ihrer\ ID\n\ @param\ other\ Knoten,\ mit\ dem\ verglichen\ wird\n\ @return\ eine\ Zahl\ kleiner/gleich/groesser\ 0,\ wenn\ die\ ID\n\ dieses\ Knotens\ kleiner/gleich/groesser\ der\ des\ anderen\ Knotens\ ist\n
comment8.params=other
comment8.target=int\ compareTo(java.lang.Integer)
comment8.text=\n\ Vergleicht\ die\ ID\ dieses\ Knotens\ mit\ einer\ anderen\ ID\n\ @param\ other\ ID,\ mit\ der\ verglichen\ wird\n\ @return\ eine\ Zahl\ kleiner/gleich/groesser\ 0,\ wenn\ die\ ID\n\ dieses\ Knotens\ kleiner/gleich/groesser\ der\ anderen\ ID\ ist\n
comment9.params=other
comment9.target=boolean\ equals(java.lang.Object)
comment9.text=\n\ Vergleicht\ einen\ Knoten\ mit\ einem\ Objekt\n\ @param\ other\ Objekt,\ mit\ dem\ Verglichen\ wird\n\ @return\ true,\ wenn\ das\ Objekt\ vergleichbar\ und\ gleich\ ist\n
numComments=12
