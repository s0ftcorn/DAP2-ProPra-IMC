#BlueJ class context
comment0.params=cap\ directed
comment0.target=Graph(int,\ boolean)
comment0.text=\n\ Erstellt\ einen\ leeren,\ (un)gerichteten\ Graphen\ mit\ einer\ Grundkapazitaet\n\ @param\ cap\ Grundkapazitaet\ fuer\ die\ Anzahl\ der\ Knoten\n\ @param\ directed\ entschiedet,\ ob\ der\ Graph\ gerichtet\ (true)\ oder\ ungerichtet\ (false)\ ist\n
comment1.params=cap
comment1.target=Graph(int)
comment1.text=\n\ Erstellt\ einen\ leeren,\ ungerichteten\ Graphen\ mit\ einer\ Grundkapazitaet\n\ @param\ cap\ Grundkapazitaet\ fuer\ die\ Anzahl\ der\ Knoten\n
comment10.params=e\ cost
comment10.target=boolean\ changeEdge(Edge,\ double)
comment10.text=\n\ Aendert\ eine\ Kante\ im\ Graphen\n\ @param\ e\ zu\ aendernde\ Kante\n\ @param\ cost\ neue\ Kosten\ der\ Kante\ (muss\ groesser\ 0\ sein)\n\ @return\ true,\ wenn\ die\ Kante\ geaendert\ wurde\n
comment11.params=src\ dest
comment11.target=boolean\ deleteEdge(int,\ int)
comment11.text=\n\ Loescht\ eine\ Kante\ aus\ dem\ Graphen\n\ @param\ src\ ID\ des\ Startknotens\n\ @param\ dest\ ID\ des\ Endknotens\n\ @return\ true,\ wenn\ die\ Kante\ geloescht\ wurde\n
comment12.params=e
comment12.target=boolean\ deleteEdge(Edge)
comment12.text=\n\ Loescht\ eine\ Kante\ aus\ dem\ Graphen\n\ @param\ e\ zu\ loeschende\ Kante\n\ @return\ true,\ wenn\ die\ Kante\ geloescht\ wurde\n
comment13.params=src\ dest
comment13.target=double\ getCost(int,\ int)
comment13.text=\n\ Gibt\ die\ Kosten\ einer\ Kante\ zurueck\n\ @param\ src\ ID\ des\ Startknotens\n\ @param\ dest\ ID\ des\ Endknotens\n\ @return\ die\ Kosten\ der\ Kante\ oder\ -1,\ falls\ die\ Knoten\ oder\ die\ Kante\ nicht\ exisitieren\n
comment14.params=
comment14.target=double[][]\ getCosts()
comment14.text=\n\ Gibt\ eine\ Kopie\ der\ Kostenmatrix\ zurueck\n\ @return\ Kopie\ der\ Kostenmatrix\n
comment15.params=filename
comment15.target=Graph\ fromFile(java.lang.String)
comment15.text=\n\ Liest\ eine\ Datei\ ein\ und\ gibt\ den\ daraus\ resultierenden\ Grahen\ zurueck\n\ @param\ filename\ Pfad\ der\ zu\ lesenden\ Datei\n\ @return\ den\ aufgebauten\ Graphen,\ oder\ null,\ wenn\ die\ Datei\ keinen\ Grpah\ enthaelt\ oder\ ein\ Fehler\ auftritt\n
comment16.params=filename
comment16.target=boolean\ toFile(java.lang.String)
comment16.text=\n\ Schreibt\ diesen\ Graph\ in\ eine\ Datei\n\ @param\ filename\ Pfad\ der\ Datei,\ in\ der\ gespeichert\ werden\ soll\n\ @return\ true,\ falls\ das\ Speichern\ erfolgreich\ war\n
comment2.params=directed
comment2.target=Graph(boolean)
comment2.text=\n\ Erstellt\ einen\ leeren,\ (un)gerichteten\ Graphen\n\ @param\ directed\ entschiedet,\ ob\ der\ Graph\ gerichtet\ (true)\ oder\ ungerichtet\ (false)\ ist\n
comment3.params=
comment3.target=Graph()
comment3.text=\n\ Erstellt\ einen\ leeren,\ ungerichteten\ Graphen\n
comment4.params=
comment4.target=boolean\ isDirected()
comment4.text=\n\ @return\ true,\ wenn\ der\ Graph\ gerichtet\ ist\n
comment5.params=
comment5.target=int\ addNode()
comment5.text=\n\ Fuegt\ einen\ neuen\ Knoten\ in\ den\ Graphen\ ein\n\ Erzeugt\ keinen\ neuen\ Knoten,\ wenn\ dieser\ schon\ exisitiert\n\ @return\ Die\ ID\ des\ neuen\ Knotens,\ -1\ falls\ der\ Knoten\ nicht\ eingefuegt\ wurde\n
comment6.params=id
comment6.target=int\ addNode(int)
comment6.text=\n\ Fuegt\ einen\ neuen\ Knoten\ in\ den\ Graphen\ ein\n\ Erzeugt\ keinen\ neuen\ Knoten,\ wenn\ dieser\ schon\ exisitiert\n\ @param\ id\ Die\ ID,\ die\ der\ neue\ Knoten\ erhalten\ soll,\ muss\ groesser\ oder\ gleich\ 0\ sein\n\ @return\ Die\ ID\ des\ neuen\ Knotens,\ -1\ falls\ der\ Knoten\ schon\ vorhanden\ war\n
comment7.params=
comment7.target=java.util.ArrayList\ getEdges()
comment7.text=\n\ Gibt\ eine\ Kopie\ der\ Liste\ aller\ Kanten\ erstellt\ aus\ den\ Adjazenzlisten\ \n\ der\ Knoten\ zur\u00FCck.\n\ @return\ Kopie\ der\ Liste\ aller\ Kanten\n
comment8.params=src\ dest\ cost
comment8.target=boolean\ addEdge(int,\ int,\ double)
comment8.text=\n\ Fuegt\ eine\ neue\ Kante\ in\ den\ Graphen\ ein\n\ @param\ src\ ID\ des\ Startknotens\n\ @param\ dest\ ID\ des\ Endknotens\n\ @param\ cost\ Kosten\ der\ Kante\ (muss\ groesser\ 0\ sein)\n\ @return\ true,\ wenn\ die\ Kante\ eingefuegt\ wurde\n
comment9.params=src\ dest\ cost
comment9.target=boolean\ changeEdge(int,\ int,\ double)
comment9.text=\n\ Aendert\ eine\ Kante\ im\ Graphen\n\ @param\ src\ ID\ des\ Startknotens\n\ @param\ dest\ ID\ des\ Endknotens\n\ @param\ cost\ neue\ Kosten\ der\ Kante\ (muss\ groesser\ 0\ sein)\n\ @return\ true,\ wenn\ die\ Kante\ geaendert\ wurde\n
numComments=17
